/**
 * Autogenerated by Thrift Compiler (0.13.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.chxlay.thrift.generate;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-12-06")
public class Car implements org.apache.thrift.TBase<Car, Car._Fields>, java.io.Serializable, Cloneable, Comparable<Car> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Car");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField BRAND_FIELD_DESC = new org.apache.thrift.protocol.TField("brand", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_delete", org.apache.thrift.protocol.TType.BOOL, (short) 4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CarStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CarTupleSchemeFactory();

    public int id; // optional
    public @org.apache.thrift.annotation.Nullable
    java.lang.String brand; // optional
    public @org.apache.thrift.annotation.Nullable
    java.lang.String color; // optional
    public boolean is_delete; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short) 1, "id"),
        BRAND((short) 2, "brand"),
        COLOR((short) 3, "color"),
        IS_DELETE((short) 4, "is_delete");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // ID
                    return ID;
                case 2: // BRAND
                    return BRAND;
                case 3: // COLOR
                    return COLOR;
                case 4: // IS_DELETE
                    return IS_DELETE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __IS_DELETE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.ID, _Fields.BRAND, _Fields.COLOR, _Fields.IS_DELETE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
        tmpMap.put(_Fields.BRAND, new org.apache.thrift.meta_data.FieldMetaData("brand", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "String")));
        tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "String")));
        tmpMap.put(_Fields.IS_DELETE, new org.apache.thrift.meta_data.FieldMetaData("is_delete", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL, "Boolean")));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Car.class, metaDataMap);
    }

    public Car() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Car(Car other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        if (other.isSetBrand()) {
            this.brand = other.brand;
        }
        if (other.isSetColor()) {
            this.color = other.color;
        }
        this.is_delete = other.is_delete;
    }

    public Car deepCopy() {
        return new Car(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        this.brand = null;
        this.color = null;
        setIs_deleteIsSet(false);
        this.is_delete = false;
    }

    public int getId() {
        return this.id;
    }

    public Car setId(int id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /**
     * Returns true if field id is set (has been assigned a value) and false otherwise
     */
    public boolean isSetId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBrand() {
        return this.brand;
    }

    public Car setBrand(@org.apache.thrift.annotation.Nullable java.lang.String brand) {
        this.brand = brand;
        return this;
    }

    public void unsetBrand() {
        this.brand = null;
    }

    /**
     * Returns true if field brand is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBrand() {
        return this.brand != null;
    }

    public void setBrandIsSet(boolean value) {
        if (!value) {
            this.brand = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getColor() {
        return this.color;
    }

    public Car setColor(@org.apache.thrift.annotation.Nullable java.lang.String color) {
        this.color = color;
        return this;
    }

    public void unsetColor() {
        this.color = null;
    }

    /**
     * Returns true if field color is set (has been assigned a value) and false otherwise
     */
    public boolean isSetColor() {
        return this.color != null;
    }

    public void setColorIsSet(boolean value) {
        if (!value) {
            this.color = null;
        }
    }

    public boolean isIs_delete() {
        return this.is_delete;
    }

    public Car setIs_delete(boolean is_delete) {
        this.is_delete = is_delete;
        setIs_deleteIsSet(true);
        return this;
    }

    public void unsetIs_delete() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_DELETE_ISSET_ID);
    }

    /**
     * Returns true if field is_delete is set (has been assigned a value) and false otherwise
     */
    public boolean isSetIs_delete() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_DELETE_ISSET_ID);
    }

    public void setIs_deleteIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_DELETE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((java.lang.Integer) value);
                }
                break;

            case BRAND:
                if (value == null) {
                    unsetBrand();
                } else {
                    setBrand((java.lang.String) value);
                }
                break;

            case COLOR:
                if (value == null) {
                    unsetColor();
                } else {
                    setColor((java.lang.String) value);
                }
                break;

            case IS_DELETE:
                if (value == null) {
                    unsetIs_delete();
                } else {
                    setIs_delete((java.lang.Boolean) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case BRAND:
                return getBrand();

            case COLOR:
                return getColor();

            case IS_DELETE:
                return isIs_delete();

        }
        throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case BRAND:
                return isSetBrand();
            case COLOR:
                return isSetColor();
            case IS_DELETE:
                return isSetIs_delete();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof Car)
            return this.equals((Car) that);
        return false;
    }

    public boolean equals(Car that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_id = true && this.isSetId();
        boolean that_present_id = true && that.isSetId();
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (this.id != that.id)
                return false;
        }

        boolean this_present_brand = true && this.isSetBrand();
        boolean that_present_brand = true && that.isSetBrand();
        if (this_present_brand || that_present_brand) {
            if (!(this_present_brand && that_present_brand))
                return false;
            if (!this.brand.equals(that.brand))
                return false;
        }

        boolean this_present_color = true && this.isSetColor();
        boolean that_present_color = true && that.isSetColor();
        if (this_present_color || that_present_color) {
            if (!(this_present_color && that_present_color))
                return false;
            if (!this.color.equals(that.color))
                return false;
        }

        boolean this_present_is_delete = true && this.isSetIs_delete();
        boolean that_present_is_delete = true && that.isSetIs_delete();
        if (this_present_is_delete || that_present_is_delete) {
            if (!(this_present_is_delete && that_present_is_delete))
                return false;
            if (this.is_delete != that.is_delete)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
        if (isSetId())
            hashCode = hashCode * 8191 + id;

        hashCode = hashCode * 8191 + ((isSetBrand()) ? 131071 : 524287);
        if (isSetBrand())
            hashCode = hashCode * 8191 + brand.hashCode();

        hashCode = hashCode * 8191 + ((isSetColor()) ? 131071 : 524287);
        if (isSetColor())
            hashCode = hashCode * 8191 + color.hashCode();

        hashCode = hashCode * 8191 + ((isSetIs_delete()) ? 131071 : 524287);
        if (isSetIs_delete())
            hashCode = hashCode * 8191 + ((is_delete) ? 131071 : 524287);

        return hashCode;
    }

    @Override
    public int compareTo(Car other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetBrand()).compareTo(other.isSetBrand());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBrand()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand, other.brand);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetColor()).compareTo(other.isSetColor());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetColor()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, other.color);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetIs_delete()).compareTo(other.isSetIs_delete());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIs_delete()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_delete, other.is_delete);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Car(");
        boolean first = true;

        if (isSetId()) {
            sb.append("id:");
            sb.append(this.id);
            first = false;
        }
        if (isSetBrand()) {
            if (!first) sb.append(", ");
            sb.append("brand:");
            if (this.brand == null) {
                sb.append("null");
            } else {
                sb.append(this.brand);
            }
            first = false;
        }
        if (isSetColor()) {
            if (!first) sb.append(", ");
            sb.append("color:");
            if (this.color == null) {
                sb.append("null");
            } else {
                sb.append(this.color);
            }
            first = false;
        }
        if (isSetIs_delete()) {
            if (!first) sb.append(", ");
            sb.append("is_delete:");
            sb.append(this.is_delete);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class CarStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public CarStandardScheme getScheme() {
            return new CarStandardScheme();
        }
    }

    private static class CarStandardScheme extends org.apache.thrift.scheme.StandardScheme<Car> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Car struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.id = iprot.readI32();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // BRAND
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.brand = iprot.readString();
                            struct.setBrandIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // COLOR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.color = iprot.readString();
                            struct.setColorIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // IS_DELETE
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.is_delete = iprot.readBool();
                            struct.setIs_deleteIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Car struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetId()) {
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
            }
            if (struct.brand != null) {
                if (struct.isSetBrand()) {
                    oprot.writeFieldBegin(BRAND_FIELD_DESC);
                    oprot.writeString(struct.brand);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.color != null) {
                if (struct.isSetColor()) {
                    oprot.writeFieldBegin(COLOR_FIELD_DESC);
                    oprot.writeString(struct.color);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetIs_delete()) {
                oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
                oprot.writeBool(struct.is_delete);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class CarTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public CarTupleScheme getScheme() {
            return new CarTupleScheme();
        }
    }

    private static class CarTupleScheme extends org.apache.thrift.scheme.TupleScheme<Car> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Car struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetId()) {
                optionals.set(0);
            }
            if (struct.isSetBrand()) {
                optionals.set(1);
            }
            if (struct.isSetColor()) {
                optionals.set(2);
            }
            if (struct.isSetIs_delete()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetId()) {
                oprot.writeI32(struct.id);
            }
            if (struct.isSetBrand()) {
                oprot.writeString(struct.brand);
            }
            if (struct.isSetColor()) {
                oprot.writeString(struct.color);
            }
            if (struct.isSetIs_delete()) {
                oprot.writeBool(struct.is_delete);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Car struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.brand = iprot.readString();
                struct.setBrandIsSet(true);
            }
            if (incoming.get(2)) {
                struct.color = iprot.readString();
                struct.setColorIsSet(true);
            }
            if (incoming.get(3)) {
                struct.is_delete = iprot.readBool();
                struct.setIs_deleteIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

